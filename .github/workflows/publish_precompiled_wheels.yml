# This workflows will upload a Python Package using twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Precompiled Wheels

on: [push]
#on:
#  release:
#    types: [created]
    # branches: [main]

jobs:

  create_release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Extract version from version.py
      id: extract_version
      run: |
        VERSION=$(sed -n 's/^__version__ = "\(.*\)"/\1/p' gsplat/version.py)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        body: |
          Release notes for version ${{ env.VERSION }}.
        draft: false
        prerelease: false

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for python ${{ matrix.python-version }} pytorch ${{ matrix.torch-version }} and cuda ${{ matrix.cuda-version }}
    runs-on: ${{ matrix.os }}
    environment: production
    needs: [create_release]
    strategy:
      matrix:
        include:
          - os: windows-2019
            python-version: '3.10'
            torch-version: 2.0.1
            cuda-version: cu117

          - os: windows-2019
            python-version: '3.10'
            torch-version: 2.0.1
            cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.10'
          #   torch-version: 2.1.2
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.10'
          #   torch-version: 2.2.2
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.10'
          #   torch-version: 2.3.1
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.10'
          #   torch-version: 2.4.0
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.11'
          #   torch-version: 2.0.1
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.11'
          #   torch-version: 2.1.2
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.11'
          #   torch-version: 2.2.2
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.11'
          #   torch-version: 2.3.1
          #   cuda-version: cu118

          # - os: windows-2019
          #   python-version: '3.11'
          #   torch-version: 2.4.0
          #   cuda-version: cu118
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          echo "Disk space after cleanup:"
          df -h
          du -sh /usr/local/* /opt/* /usr/* | sort -hr
                    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade setuptools
          pip install ninja

      - name: Display torch_version variable
        run: echo "The value of torch_version is $torch_version"

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/${{ runner.os }}.sh ${{ matrix.cuda-version }}
      
      - name: Install PyTorch 
        run: |
          pip install torch==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "import torch; print('CUDA Available:', torch.cuda.is_available())"

      - name: Patch PyTorch static constexpr on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          Torch_DIR=`python -c 'import os; import torch; print(os.path.dirname(torch.__file__))'`
          sed -i '31,38c\
          TORCH_API void lazy_init_num_threads();' ${Torch_DIR}/include/ATen/Parallel.h
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install build twine

      - name: Set version
        run: |
          VERSION=`sed -n 's/^__version__ = "\(.*\)"/\1/p' gsplat/version.py`
          TORCH_VERSION=`echo "pt${{ matrix.torch-version }}" | sed "s/..$//" | sed "s/\.//g"`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          echo "New version name: $VERSION+$TORCH_VERSION$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION+$CUDA_VERSION/" gsplat/version.py
        shell:
          bash

      - name: Strip unsupported tags in README
        run: |
          sed -i '/<!-- pypi-strip -->/,/<!-- \/pypi-strip -->/d' README.md

      - name: Build wheel
        # architectures 8.7 and higher do not seem to be support by the chsoen version of pytorch.
        # architectures 5.x give compilation errors "no suitable conversion function from "__half" to "int" exists"
        # architectures 6.x give compilation errors "namespace "cooperative_groups" has no member "labeled_partition""
        run: |          
          pip install wheel
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          python setup.py bdist_wheel --dist-dir=dist
        shell: bash  # `source` does not exist in windows powershell
      
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

      - name: Get wheel file name
        id: get_wheel_name
        run: echo "WHEEL_NAME=$(basename dist/*.whl)" >> $GITHUB_ENV

      - name: Upload to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: ${{ env.WHEEL_NAME }}
          asset_content_type: application/zip

  upload_pypi:
    name: Upload to PyPi
    needs: [build_wheels]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - name: Publish package to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Publish package to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |         
        twine upload --username __token__ --password $PYPI_TOKEN dist/*
