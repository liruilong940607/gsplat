# This workflows will upload a Python Package using twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Upload Python Package

on: [push]
#on:
#  release:
#    types: [created]
    # branches: [main]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} for python ${{ matrix.python-version }} and cuda { matrix.cuda-version }}
    runs-on: ${{ matrix.os }}
    environment: production
    strategy:
      matrix:
        os: [windows-2019, ]
        python-version: ['3.10']
        cuda-version: ['cu118', ]
        exclude:
          - os: windows-2019
            python-version: '3.11'
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        run: |
          echo "Disk space before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get clean
          echo "Disk space after cleanup:"
          df -h
          du -sh /usr/local/* /opt/* /usr/* | sort -hr
                    
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade setuptools
          pip install ninja


      - name: Determine PyTorch version
        id: get-torch-version
        shell: bash
        run: |
          if [[ "${{ matrix.cuda-version }}" == "cu117" || "${{ matrix.cuda-version }}" == "cu118" ]]; then
            echo "torch_version=2.0.0" >> $GITHUB_ENV
          elif [[ "${{ matrix.cuda-version }}" == "cu116" ]]; then
            echo "torch_version=1.13.0" >> $GITHUB_ENV
          elif [[ "${{ matrix.cuda-version }}" == "cu113" || "${{ matrix.cuda-version }}" == "cu115" ]]; then
            echo "torch_version=1.11.0" >> $GITHUB_ENV
          fi
          echo $GITHUB_ENV

      - name: Display torch_version variable
        run: echo "The value of torch_version is $torch_version"

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/${{ runner.os }}.sh ${{ matrix.cuda-version }}

      - name: Install PyTorch 
        run: |
          pip install torch==${{ env.torch_version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "import torch; print('CUDA Available:', torch.cuda.is_available())"

      - name: Patch PyTorch static constexpr on Windows
        if: ${{ runner.os == 'Windows' }}
        run: |
          Torch_DIR=`python -c 'import os; import torch; print(os.path.dirname(torch.__file__))'`
          sed -i '31,38c\
          TORCH_API void lazy_init_num_threads();' ${Torch_DIR}/include/ATen/Parallel.h
        shell: bash

      - name: Install dependencies
        run: |
          python -m pip install build twine

      - name: Set version
        run: |
          VERSION=`sed -n 's/^__version__ = "\(.*\)"/\1/p' gsplat/version.py`
          CUDA_VERSION=`echo ${{ matrix.cuda-version }}`
          echo "New version name: $VERSION+$CUDA_VERSION"
          sed -i "s/$VERSION/$VERSION+$CUDA_VERSION/" gsplat/version.py
        shell:
          bash

      - name: Strip unsupported tags in README
        run: |
          sed -i '/<!-- pypi-strip -->/,/<!-- \/pypi-strip -->/d' README.md

      - name: Build wheel
        # architectures 8.x and 9.x (Ampere, Ada, Hopper) are not avaible in the current github action
        # architectures 5.x give compilation errors "no suitable conversion function from "__half" to "int" exists"
        # architectures 6.x give compilation errors  "namespace "cooperative_groups" has no member "labeled_partition""
        run: |          
          pip install wheel
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          export TORCH_CUDA_ARCH_LIST="7.2;7.5"
          python setup.py bdist_wheel --dist-dir=dist
        shell: bash  # `source` does not exist in windows powershell
      
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build sdist
      run: BUILD_NO_CUDA=1 pipx run build --sdist
    - uses: actions/upload-artifact@v3
      with:
        path: dist/*.tar.gz
            

  upload_pypi:
    name: Upload to PyPi
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifact
        path: dist

    - name: Publish package to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Publish package to PyPI
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |         
        twine upload --username __token__ --password $PYPI_TOKEN dist/*
